name: Download data
description: download data
inputs:
- {name: project_id, type: String}
- {name: bucket, type: String}
- {name: file_name, type: String}
outputs:
- {name: Output, type: typing.Dict}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'google-cloud-storage' 'pandas' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m
      pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def download_data(project_id, bucket, file_name):\n    '''download data'''\n\
      \    from google.cloud import storage\n    import pandas as pd\n    import logging\
      \ \n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
      \n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(bucket)\n\
      \    blob = bucket.blob(file_name)\n    local_path = '/tmp/'+ file_name\n  \
      \  blob.download_to_filename(local_path)\n    logging.info('#######Downloaded\
      \ Data!')\n    dict_from_csv = pd.read_csv(local_path, index_col=None, squeeze=True).to_dict()\n\
      \    logging.info('#######Returning Data as Dictionary Object!')\n    return\
      \ dict_from_csv\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj,\
      \ str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n\
      \        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n\
      \        else:\n            raise TypeError(\n                \"Object of type\
      \ '%s' is not JSON serializable and does not have .to_struct() method.\"\n \
      \               % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer,\
      \ sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Download\
      \ data', description='download data')\n_parser.add_argument(\"--project-id\"\
      , dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--bucket\", dest=\"bucket\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--file-name\", dest=\"\
      file_name\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = download_data(**_parsed_args)\n\n_outputs = [_outputs]\n\
      \n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx,\
      \ output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
      \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
      \        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --project-id
    - {inputValue: project_id}
    - --bucket
    - {inputValue: bucket}
    - --file-name
    - {inputValue: file_name}
    - '----output-paths'
    - {outputPath: Output}
